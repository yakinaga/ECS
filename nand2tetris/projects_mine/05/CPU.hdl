// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // decode instruction
    And(a=instruction[15], b=true, out=AorC);
    And(a=instruction[12], b=AorC, out=AorM);
    And(a=instruction[11], b=AorC, out=c1);
    And(a=instruction[10], b=AorC, out=c2);
    And(a=instruction[9], b=AorC, out=c3);
    And(a=instruction[8], b=AorC, out=c4);
    And(a=instruction[7], b=AorC, out=c5);
    And(a=instruction[6], b=AorC, out=c6);
    And(a=instruction[5], b=AorC, out=d1);
    And(a=instruction[4], b=AorC, out=d2);
    And(a=instruction[3], b=AorC, out=d3);
    And(a=instruction[2], b=AorC, out=j1);
    And(a=instruction[1], b=AorC, out=j2);
    And(a=instruction[0], b=AorC, out=j3);
    // A-register
    Mux16(a=instruction, b=ALUout, sel=AorC, out=Ain);
    Mux(a=true, b=d1, sel=AorC, out=Aload);
    ARegister(in=Ain, load=Aload, out=Aout, out[0..14]=addressM);
    // D-register
    DRegister(in=ALUout, load=d2, out=Dout);
    // ALU
    Mux16(a=Aout, b=inM, sel=AorM, out=AMout);
    ALU(x=Dout, y=AMout, 
        zx=c1, nx=c2, zy=c3, ny=c4, f=c5, no=c6, 
        out=ALUout, out=outM, zr=ALUzr, ng=ALUng);
    // PC
    Mux(a=false, b=JCout, sel=AorC, out=PCload);
    PC(in=Aout, load=PCload, inc=true, reset=reset, out[0..14]=pc);
    // Jump control: JCout = (j1 & ng) | (j2 & zr) | (j3 & positive)
    And(a=j1, b=ALUng, out=int1);
    And(a=j2, b=ALUzr, out=int2);
    Or(a=ALUng, b=ALUzr, out=ngorzr);
    Not(in=ngorzr, out=ALUposi); // ALUposi = 1 if ALUout > 0
    And(a=j3, b=ALUposi, out=int3);
    Or(a=int1, b=int2, out=int4);
    Or(a=int3, b=int4, out=JCout);
    // Memory write frag
    And(a=d3, b=AorC, out=writeM);
}